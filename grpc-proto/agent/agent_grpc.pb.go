// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: agent/agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Agent_ContainerStart_FullMethodName    = "/agent.Agent/ContainerStart"
	Agent_ContainerStop_FullMethodName     = "/agent.Agent/ContainerStop"
	Agent_ContainerRemove_FullMethodName   = "/agent.Agent/ContainerRemove"
	Agent_ContainerList_FullMethodName     = "/agent.Agent/ContainerList"
	Agent_ContainerListener_FullMethodName = "/agent.Agent/ContainerListener"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	ContainerStart(ctx context.Context, in *ContainerStartRequest, opts ...grpc.CallOption) (*Response, error)
	ContainerStop(ctx context.Context, in *ContainerStopRequest, opts ...grpc.CallOption) (*Response, error)
	ContainerRemove(ctx context.Context, in *ContainerRemoveRequest, opts ...grpc.CallOption) (*Response, error)
	ContainerList(ctx context.Context, in *ContainerListRequest, opts ...grpc.CallOption) (*ContainerListResponse, error)
	ContainerListener(ctx context.Context, in *ContainerListenerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ContainerEvent], error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) ContainerStart(ctx context.Context, in *ContainerStartRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Agent_ContainerStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ContainerStop(ctx context.Context, in *ContainerStopRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Agent_ContainerStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ContainerRemove(ctx context.Context, in *ContainerRemoveRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Agent_ContainerRemove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ContainerList(ctx context.Context, in *ContainerListRequest, opts ...grpc.CallOption) (*ContainerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContainerListResponse)
	err := c.cc.Invoke(ctx, Agent_ContainerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ContainerListener(ctx context.Context, in *ContainerListenerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ContainerEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_ContainerListener_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ContainerListenerRequest, ContainerEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_ContainerListenerClient = grpc.ServerStreamingClient[ContainerEvent]

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility.
type AgentServer interface {
	ContainerStart(context.Context, *ContainerStartRequest) (*Response, error)
	ContainerStop(context.Context, *ContainerStopRequest) (*Response, error)
	ContainerRemove(context.Context, *ContainerRemoveRequest) (*Response, error)
	ContainerList(context.Context, *ContainerListRequest) (*ContainerListResponse, error)
	ContainerListener(*ContainerListenerRequest, grpc.ServerStreamingServer[ContainerEvent]) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServer struct{}

func (UnimplementedAgentServer) ContainerStart(context.Context, *ContainerStartRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerStart not implemented")
}
func (UnimplementedAgentServer) ContainerStop(context.Context, *ContainerStopRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerStop not implemented")
}
func (UnimplementedAgentServer) ContainerRemove(context.Context, *ContainerRemoveRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerRemove not implemented")
}
func (UnimplementedAgentServer) ContainerList(context.Context, *ContainerListRequest) (*ContainerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerList not implemented")
}
func (UnimplementedAgentServer) ContainerListener(*ContainerListenerRequest, grpc.ServerStreamingServer[ContainerEvent]) error {
	return status.Errorf(codes.Unimplemented, "method ContainerListener not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}
func (UnimplementedAgentServer) testEmbeddedByValue()               {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	// If the following call pancis, it indicates UnimplementedAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_ContainerStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ContainerStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ContainerStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ContainerStart(ctx, req.(*ContainerStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ContainerStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ContainerStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ContainerStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ContainerStop(ctx, req.(*ContainerStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ContainerRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ContainerRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ContainerRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ContainerRemove(ctx, req.(*ContainerRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ContainerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ContainerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ContainerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ContainerList(ctx, req.(*ContainerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ContainerListener_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContainerListenerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).ContainerListener(m, &grpc.GenericServerStream[ContainerListenerRequest, ContainerEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_ContainerListenerServer = grpc.ServerStreamingServer[ContainerEvent]

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContainerStart",
			Handler:    _Agent_ContainerStart_Handler,
		},
		{
			MethodName: "ContainerStop",
			Handler:    _Agent_ContainerStop_Handler,
		},
		{
			MethodName: "ContainerRemove",
			Handler:    _Agent_ContainerRemove_Handler,
		},
		{
			MethodName: "ContainerList",
			Handler:    _Agent_ContainerList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ContainerListener",
			Handler:       _Agent_ContainerListener_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent/agent.proto",
}
